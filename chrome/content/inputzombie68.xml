<?xml version="1.0"?>
<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
					
					
  <!-- platformHTMLBindings was removed https://bugzilla.mozilla.org/show_bug.cgi?id=1419091  -->
	<!-- extends="chrome://global/content/platformHTMLBindings.xml#inputFields" -->
  <binding id="inputzombie">

	<!-- XXX: I'm not sure that this <content> tag is necessary -->
	<content>
	  <children />
	</content>
	<implementation>
	  <field name="debugLevel">0</field>
	  <field name="activeLocale">"us_int"</field>
	  <field name="deadKeys">
		<![CDATA[
		ZombieKeys.DeadKeys
		]]>
	  </field>
	  <field name="aliveKeys">
		<![CDATA[
		ZombieKeys.AliveKeys
		]]>
	  </field>
	  <field name="layouts">
		<![CDATA[
		ZombieKeys.Layouts
		]]>
	  </field>
	  <field name="hexUnicodeKey">
		<![CDATA[
		ZombieKeys.HexUnicodeKey
		]]>
	</field>
	  <field name="decUnicodeModifiers">
		<![CDATA[
		({"ctrlKey": false, "shiftKey": false, "altKey": "true"})
		]]>
	  </field>
	  <field name="decUnicode">
		<![CDATA[
		""
		]]>
	  </field>
	  <field name="keyEventProps">
		<![CDATA[
		['keyCode', 'charCode', 'shiftKey', 'altKey', 'ctrlKey']
		]]>
	  </field>
	<method name="getCurrentLocale">
		<body>
		  <![CDATA[
			return Components.classes["@mozilla.org/preferences-service;1"]
				.getService(Components.interfaces.nsIPrefBranch)
				.getCharPref('extensions.zombiekeys.currentLayout');
		]]>
	</body>
	</method>
	<method name="log">
		<parameter name="message" />
		<body>
		  <![CDATA[
				var consoleService = Components.classes["@mozilla.org/consoleservice;1"]
					.getService(Components.interfaces.nsIConsoleService);
					consoleService.logStringMessage("[ZombieKeys XML]" + message + (message != "\n" ? " " : ""));
		]]>
		</body>
	</method>
	<method name="logKey">
		<parameter name="why" />
		<parameter name="event" />
		<body>
		  <![CDATA[
		    if (ZombieKeys.Util.isPrivateBrowsing) return;
			var message=why;
			for (var k=0; k<this.keyEventProps.length; k++) {
					message += this.keyEventProps[k] + "=" + event[this.keyEventProps[k]]+" ";
			}
			ZombieKeys.Util.logToConsole(message+"\n", true);
		]]>
		</body>
	</method>

	<method name="isDebugOption">
		<parameter name="option" />
		<body>
		  <![CDATA[
		try {
				var prefService = Components.classes["@mozilla.org/preferences-service;1"]
								.getService(Components.interfaces.nsIPrefBranch);
				if (!prefService.getBoolPref("extensions.zombiekeys.debug"))
					return false;
				return prefService.getBoolPref("extensions.zombiekeys.debug." + option);}
			catch(e) {return false;}
		]]>
		</body>
	</method>

	<method name="isPrefOption">
		<parameter name="option" />
		<body>
		  <![CDATA[
			try {
				var prefService = Components.classes["@mozilla.org/preferences-service;1"]
								.getService(Components.interfaces.nsIPrefBranch);
				return prefService.getBoolPref("extensions.zombiekeys." + option);
			}
			catch(e) {return false;}
		]]>
		</body>
	</method>



	<method name="logMappingString">
		<parameter name="mapping" />
		<body>
		  <![CDATA[
			var message="";
			for (var mappee in mapping) {
							message += mappee+" ("+mappee.charCodeAt(0)+") => "+mapping[mappee]+" ("+mapping[mappee].charCodeAt(0)+") ";
			}
			return message+"\n";
		]]>
</body>
	</method>
	<method name="checkModifiers">
		<parameter name="event" />
		<parameter name="modifiers" />
		<body>
		  <![CDATA[
				return ZombieKeys.checkModifiers(event, modifiers);
			]]>
	    </body>
	</method>
	<method name="fakeKey">
		<parameter name="event" />
		<parameter name="chr" />
		<parameter name="createKeyUp" />
		<body>
 		  <![CDATA[
		    ZombieKeys.fakeKey(event, chr, createKeyUp);
		]]>
	    </body>
	</method>
	<method name="getPreceedingString">
		<parameter name="elt" />
		<parameter name="numchars" />
		<body>
		  <![CDATA[
				var pos = elt.selectionStart;
				if (pos < numchars) {numchars=pos;}
				return elt.value.slice(pos-numchars,pos);
		]]>
	    </body>
	</method>
	<method name="replacePreceedingString">
		<parameter name="elt" />
		<parameter name="numchars" />
		<parameter name="newtext" />
		<body>
		  <![CDATA[
				var posStart = elt.selectionStart;
				var posEnd = elt.selectionEnd;
				var scrollTop = elt.scrollTop;
				var scrollLeft = elt.scrollLeft;

				if (posStart < numchars) {numchars=posStart;}

				elt.value = elt.value.slice(0,posStart-numchars)+
						newtext+
						elt.value.slice(posEnd);
				var newpos = posStart+newtext.length;
				elt.selectionStart = newpos;
				elt.selectionEnd = newpos;

				elt.scrollTop = scrollTop;
				elt.scrollLeft = scrollLeft;
				elt.focus();
				]]>
		</body>
	</method>
	<method name="initLocale">
		<parameter name="locale" />
		<body>
		  <![CDATA[
			var that=this;
			ZombieKeys.Util.logDebug("Initialize key locale: " + locale + " ...");
			var theLayout; // determine locale
			Array.forEach(this.layouts, function(layout) {
				if (layout.locale==locale) {
								theLayout = layout;
				}
			});


			for (var k=0; k<this.deadKeys.length; k++) {
				Array.forEach(theLayout.map_deadKeys, function(Map) {
					if(Map.id == that.deadKeys[k].id) {
						that.deadKeys[k].keyCode = theLayout.map_deadKeys[k].keyCode;
						// Special mods
						if (typeof theLayout.map_deadKeys[k].charCode)
							that.deadKeys[k].charCode = theLayout.map_deadKeys[k].charCode;
						else
							if(that.layouts[0].map_deadKeys[k].charCode)
								that.deadKeys[k].charCode = that.layouts[0].map_deadKeys[k].charCode;

						if (typeof theLayout.map_deadKeys[k].shiftKey !== "undefined")
							that.deadKeys[k].modifiers.shiftKey = theLayout.map_deadKeys[k].shiftKey;
						else
							that.deadKeys[k].modifiers.shiftKey = that.deadKeys[k].defaultmods.shiftKey;

						if (typeof theLayout.map_deadKeys[k].altKey !== "undefined")
							that.deadKeys[k].modifiers.altKey = theLayout.map_deadKeys[k].altKey;
						else
							that.deadKeys[k].modifiers.altKey = that.deadKeys[k].defaultmods.altKey;
					}
				});
			}

			for (var k=0; k<this.aliveKeys.length; k++) {
				Array.forEach(theLayout.map_liveKeys, function(Map) {
					if(Map.id == that.aliveKeys[k].id) {
						that.aliveKeys[k].keyCode = Map.keyCode;
						that.aliveKeys[k].charCode = Map.charCode;

						if (typeof Map.ctrlKey !== "undefined" )
							that.aliveKeys[k].modifiers.ctrlKey = Map.ctrlKey;
						else
							that.aliveKeys[k].modifiers.ctrlKey = that.aliveKeys[k].defaultmods.ctrlKey;

						if (typeof Map.shiftKey !== "undefined" )
							that.aliveKeys[k].modifiers.shiftKey = Map.shiftKey;
						else
							that.aliveKeys[k].modifiers.shiftKey = that.aliveKeys[k].defaultmods.shiftKey;

						if (typeof Map.altKey !== "undefined" )
							that.aliveKeys[k].modifiers.altKey = Map.altKey;
						else
							that.aliveKeys[k].modifiers.altKey = that.aliveKeys[k].defaultmods.altKey;
					}
				});
			}
			that.activeLocale = locale;
		]]>
		</body>
	</method>
</implementation>
<handlers>
	  <handler event="keypress">
		<![CDATA[
		    if (ZombieKeys.DisableListeners) return;
			var isDebug = this.isDebugOption('keyPressHandler');
			if (isDebug) {this.logKey("press: ", event);}
			if (this.activeLocale != this.getCurrentLocale()) {
				ZombieKeys.Util.logDebug("Change active Locale from " + this.activeLocale + " to " + this.getCurrentLocale());
				this.initLocale(this.getCurrentLocale());
				this.activeLocale = this.getCurrentLocale();
			}

			// check "alive" keys which fire during "keypress"
			for (var k=0; k<aliveKeys.length; k++) {
				if (  ( (event.keyCode && event.keyCode  == aliveKeys[k].keyCode)
					||
						(event.charCode && event.charCode == aliveKeys[k].charCode)    )
					&&
					checkModifiers(event, aliveKeys[k].modifiers)) {
					fakeKey(event, aliveKeys[k].target);
					return;
				}
			}

			// check if/which "dead" key is active
			for (var k=0; k<this.deadKeys.length; k++) {
				if (this.deadKeys[k].alive) {
					this.deadKeys[k].alive = false;
					// check if there's a mapping for this character
					// entered after "dead" key
					if (this.isPrefOption('showMapping') && !ZombieKeys.Util.isPrivateBrowsing) {
						ZombieKeys.Util.logToConsole("Detected living zombie #"+k+" for "+event.charCode+
										   " you can now: \n "+this.logMappingString(this.deadKeys[k].mapping), true);
					}
					var code = String.fromCharCode(event.charCode);
					if (this.deadKeys[k].mapping[code]) {
						// AG make a pair of events press+down
							if (deadKeys[k].menuFake && event.type=='keypress') {
								// make it a pair of events
								deadKeys[k].menuFake = false;
								fakeKey(event, deadKeys[k].mapping[code], true); // copy event with keyup!
							}
							else
								this.fakeKey(event, deadKeys[k].mapping[code], false);
						return;
					}
				}
			}
  ]]>
	  </handler>
	  <handler event="keyup">
		<![CDATA[
		    if (ZombieKeys.DisableListeners) return;
			var isDebug = this.isDebugOption('keyUpHandler');

			if (isDebug) {this.logKey("up: ", event);}

			// check "alive" keys which only fire on "keyup"
			for (var k=0; k<this.aliveKeys.length; k++) {
				if (this.aliveKeys[k].keyCode &&
					(event.keyCode == this.aliveKeys[k].keyCode) &&
					checkModifiers(event, this.aliveKeys[k].modifiers))
				{
					this.fakeKey(event, this.aliveKeys[k].target);
					return;
				}
			}

			// check if "dead" key is activated
			for (var k=0; k<this.deadKeys.length; k++) {
				if (
					(
					 (event.keyCode == this.deadKeys[k].keyCode)
					 ||
					 (this.deadKeys[k].charCode && event.charCode == this.deadKeys[k].charCode)
					)
					&&
					this.checkModifiers(event, this.deadKeys[k].modifiers))
				{
					if (isDebug && !ZombieKeys.Util.isPrivateBrowsing) {
						ZombieKeys.Util.logToConsole("created zombie # " + k
							   + this.logMappingString(this.deadKeys[k].mapping), true);
					}
					this.deadKeys[k].alive = true;
					event.preventDefault();
					event.stopPropagation();
					return;
				}
			}
			// process ALT+X (treat preceeding 4 chars as hex unicode string
			// and replace with corresponding char)
			if ((event.keyCode == this.hexUnicodeKey.keyCode) &&
					this.checkModifiers(event, this.hexUnicodeKey.modifiers)) {
				var hexUnicode = this.getPreceedingString(event.target, 4);
				var code = parseInt(hexUnicode, 16);
				this.replacePreceedingString(event.target, 4, String.fromCharCode(code));
				return;
			}

			// process ALT+<numeric keypad>
			if (this.checkModifiers(event, this.decUnicodeModifiers))
			{
				if ((event.keyCode >= 96) && (event.keyCode <= 105)) {
					this.decUnicode += (event.keyCode-96).toString(); // add digit
					event.preventDefault();
					event.stopPropagation();
					return;
				} else if (event.keyCode == 18) {
					// released ALT - let's insert
					if (this.decUnicode != "") {
						var code = parseInt(decUnicode, 10);
						this.fakeKey(event, String.fromCharCode(code));
						this.decUnicode = "";
					}
					event.preventDefault();
					event.stopPropagation();
					return;
				}
			}
  ]]>
	  </handler>
	</handlers>
  </binding>
</bindings>
