<?xml version="1.0"?>
<bindings xmlns="http://www.mozilla.org/xbl"
xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <binding id="inputzombie"
  extends="chrome://global/content/platformHTMLBindings.xml#inputFields">

	<!-- XXX: I'm not sure that this <content> tag is necessary -->
	<content>
	  <children />
	</content>
	<implementation>
	  <field name="debugLevel">0</field>
	  <field name="activeLocale">"us_int"</field>
	  <field name="deadKeys">
		<![CDATA[

		[
			{
				"modifiers": {"ctrlKey": true, "shiftKey": false, "altKey": false},
				"defaultmods": {"ctrlKey": true, "shiftKey": false, "altKey": false},
				"id" : 1,
				"keyCode": 192,
				"mapping": {
					 "A": "\u00c0", "a": "\u00e0", "\u0424": "\u00c0", "\u0444": "\u00e0"
					,"E": "\u00c8", "e": "\u00e8", "\u0423": "\u00c8", "\u0443": "\u00e8"
					,"I": "\u00cc", "i": "\u00ec", "\u0428": "\u00cc", "\u0448": "\u00ec"
					,"O": "\u00d2", "o": "\u00f2", "\u0429": "\u00d2", "\u0449": "\u00f2"
					,"U": "\u00d9", "u": "\u00f9", "\u0413": "\u00d9", "\u0433": "\u00f9"
				},
				"menuFake": false},

{				"modifiers": {"ctrlKey": true, "shiftKey": false, "altKey": false},
				"defaultmods": {"ctrlKey": true, "shiftKey": false, "altKey": false},
				"id": 2,
				"keyCode":  39, // Acute "'"
				"mapping": {
					 "A": "\u00c1", "a": "\u00e1", "\u0424": "\u00c0", "\u0444": "\u00e0"
					,"D": "\u00d0", "d": "\u00f0"
					,"E": "\u00c9", "e": "\u00e9", "\u0423": "\u00c8", "\u0443": "\u00e8"
					,"I": "\u00cd", "i": "\u00ed", "\u0428": "\u00cc", "\u0448": "\u00ec"
					,"O": "\u00d3", "o": "\u00f3", "\u0429": "\u00d2", "\u0449": "\u00f2"
					,"U": "\u00da", "u": "\u00fa", "\u0413": "\u00d9", "\u0433": "\u00f9"
					,"Y": "\u00dd", "y": "\u00fd"
					,"9": "\u2018", "0": "\u2019" //Smart single quotes
				},
				"menuFake": false},

{				"modifiers":   {"ctrlKey": true, "shiftKey": true, "altKey": false},
				"defaultmods": {"ctrlKey": true, "shiftKey": true, "altKey": false},
				"id": 3,
				"keyCode": 54, // Circumflex "^"
				"mapping": {
					 "A": "\u00c2", "a": "\u00e2", "\u0424": "\u00c2", "\u0444": "\u00e2"
					,"E": "\u00ca", "e": "\u00ea", "\u0423": "\u00ca", "\u0443": "\u00ea"
					,"I": "\u00ce", "i": "\u00ee", "\u0428": "\u00ce", "\u0448": "\u00ee"
					,"O": "\u00d4", "o": "\u00f4", "\u0429": "\u00d4", "\u0449": "\u00f4"
					,"U": "\u00db", "u": "\u00fb", "\u0413": "\u00db", "\u0433": "\u00fb"
				},
				"menuFake": false},

				// can not user CTRL+SHIFT+# on UK keyboard as it switches tab groups in Fx 5.0

{				"modifiers":   {"ctrlKey": true, "shiftKey": true, "altKey": false},
				"defaultmods": {"ctrlKey": true, "shiftKey": true, "altKey": false},
				"id": 4,
				"keyCode": 192, // Tilde "~"  uk:222  us:192
				"mapping": {
					 "A": "\u00c3", "a": "\u00e3", "\u0424": "\u00c3", "\u0444": "\u00e3"
					,"E": "\u1ebc", "e": "\u1ebd", "\u0423": "\u1ebc", "\u0443": "\u1ebd"
					,"I": "\u0128", "i": "\u0129", "\u0428": "\u0128", "\u0448": "\u0129"
					,"N": "\u00d1", "n": "\u00f1"
					,"O": "\u00d5", "o": "\u00f5", "\u0429": "\u00d5", "\u0449": "\u00f5"
					,"U": "\u0168", "u": "\u0169", "\u0413": "\u0168", "\u0433": "\u0169"
					,"V": "\u1e7c", "v": "\u1e7d"
					,"Y": "\u1ef8", "y": "\u1ef9"
					},
				"menuFake": false},

{				"modifiers":   {"ctrlKey": true, "shiftKey": true, "altKey": false},
				"defaultmods": {"ctrlKey": true, "shiftKey": true, "altKey": false},
				"id": 5,
				"keyCode": 59, // Umlaut ":"
				"mapping": {
					 "A": "\u00c4", "a": "\u00e4", "\u0424": "\u00c4", "\u0444": "\u00e4"
					,"E": "\u00cb", "e": "\u00eb", "\u0423": "\u00cb", "\u0443": "\u00eb"
					,"I": "\u00cf", "i": "\u00ef", "\u0428": "\u00cf", "\u0448": "\u00ef"
					,"O": "\u00d6", "o": "\u00f6", "\u0429": "\u00d6", "\u0449": "\u00f6"
					,"U": "\u00dc", "u": "\u00fc", "\u0413": "\u00dc", "\u0433": "\u00fc"
					,"Y": "\u0178", "y": "\u00ff"
					},
				"menuFake": false},

{				"modifiers":   {"ctrlKey": true, "shiftKey": true, "altKey": false},
				"defaultmods": {"ctrlKey": true, "shiftKey": true, "altKey": false},
				"id": 6,
				"keyCode": 50, // Ring "@"
				"mapping": {
							 "A": "\u00c5", "a": "\u00e5"
							,"U": "\u016e", "u": "\u016f"
							,"y": "\u1e99"
							,"w": "\u1e98"
							},
				"menuFake": false},

{				"modifiers":   {"ctrlKey": true, "shiftKey": true, "altKey": false},
				"defaultmods": {"ctrlKey": true, "shiftKey": true, "altKey": false},
				"id": 7,
					"keyCode": 55, // AE,OE,Sharp S "&", section sign (paragraph)
				"mapping": { "a": "\u00e6"
							,"A": "\u00c6"
							,"o": "\u0153"
							,"O": "\u0152"
							,"s": "\u00df"
							,"$": "\u00a7"
							},
				"menuFake": false},


{				"modifiers":   {"ctrlKey": true, "shiftKey": false, "altKey": false},
				"defaultmods": {"ctrlKey": true, "shiftKey": false, "altKey": false},
				"id": 8,
				"keyCode": 191, // Stroke "/"+CTRL
				"mapping": {
							 "O": "\u00d8", "o": "\u00f8"
							,"c": "\u00a2"
							,"d": "\u00f0", "D": "\u00d0" /* eth */
							,"u": "\u00fe", "U": "\u00de" /* thorn */
							},
				"menuFake": false},

{				"modifiers":   {"ctrlKey": true, "shiftKey": true, "altKey": false},
				"defaultmods": {"ctrlKey": true, "shiftKey": true, "altKey": false},
				"id": 9,
					"keyCode": 190, // Caron (Hacek) ">" - problem: how to type d>z?
					"mapping": {
						 "A": "\u01cd", "a": "\u01ce", "\u0424": "\u01cd", "\u0444": "\u01ce"
						,"C": "\u010c", "c": "\u010d"
						,"D": "\u010e", "d": "\u010f"
						,"E": "\u011a", "e": "\u011B", "\u0423": "\u011a", "\u0443": "\u011B"
						,"G": "\u01e6", "g": "\u01e7"
						,"H": "\u021e", "h": "\u021f"
						,"I": "\u01cf", "i": "\u01d0", "\u0428": "\u01cf", "\u0448": "\u01d0"
						,"j": "\u01f0"
						,"K": "\u01e8", "k": "\u01e9"
						,"L": "\u013d", "l": "\u013e"
						,"N": "\u0147", "n": "\u0148"
						,"O": "\u01d1", "o": "\u01d2", "\u0429": "\u01d0", "\u0449": "\u01d2"
						,"R": "\u0158", "r": "\u0159"
						,"S": "\u0160", "s": "\u0161"
						,"T": "\u0164", "t": "\u0165"
						,"U": "\u01d3", "u": "\u01d4", "\u0413": "\u01d3", "\u0433": "\u01d4"
						,"Z": "\u017d", "z": "\u017e"
						," ": "\u02c7"
						},
				"menuFake": false},

{				"modifiers":   {"ctrlKey": true, "shiftKey": false, "altKey": false},
				"defaultmods": {"ctrlKey": true, "shiftKey": false, "altKey": false},
				"id": 10,
				"keyCode": 188, // Comma below / Cedilla ","
				"mapping": {
					 "C": "\u00c7", "c": "\u00e7"
					,"D": "\u1e10", "d": "\u1e11"
					,"E": "\u0228", "e": "\u0229", "\u0423": "\u0228", "\u0443": "\u0229"
					,"G": "\u0122", "g": "\u0123"
					,"H": "\u1e28", "h": "\u1e29"
					,"K": "\u0136", "k": "\u0137"
					,"L": "\u013b", "l": "\u013c"
					,"N": "\u0145", "n": "\u0146"
					,"R": "\u0156", "r": "\u0157"
					,"S": "\u015e", "s": "\u015f"
					,"T": "\u0162", "t": "\u0163"
					," ": "\u00b8"
					},
				"menuFake": false},

{				"modifiers":   {"ctrlKey": true, "shiftKey": true, "altKey": false},
				"defaultmods": {"ctrlKey": true, "shiftKey": true, "altKey": false},
				"id": 11,
				"keyCode": 57, // Breve "("
				"mapping": {
					 "A": "\u0102", "a": "\u0103", "\u0424": "\u0102", "\u0444": "\u0103"
					,"E": "\u0114", "e": "\u0115", "\u0423": "\u0114", "\u0443": "\u0115"
					,"G": "\u011e", "g": "\u011f"
					,"H": "\u1e2a", "h": "\u1e2b" // breve below
					,"I": "\u012c", "i": "\u012d", "\u0428": "\u012c", "\u0448": "\u012d"
					,"O": "\u014e", "o": "\u014f", "\u014e": "\u00d6", "\u0449": "\u014f"
					,"U": "\u016c", "u": "\u016d", "\u016c": "\u00dc", "\u0433": "\u016d"
					,"X": "\u04c1", "x": "\u04c2"  // ZHE
					," ": "\u02D8"
					},
				"menuFake": false},

{				"modifiers":   {"ctrlKey": true, "shiftKey": true, "altKey": false},
				"defaultmods": {"ctrlKey": true, "shiftKey": true, "altKey": false},
				"id": 12,
				"keyCode": 56, // Ogonek "*"
				"mapping": {
							 "A": "\u0104", "a": "\u0105", "\u0424": "\u0104", "\u0444": "\u0105"
							,"E": "\u0118", "e": "\u0119", "\u0423": "\u0118", "\u0443": "\u0119"
							,"I": "\u012e", "i": "\u012f", "\u0428": "\u012e", "\u0448": "\u012f"
							,"O": "\u01ea", "o": "\u01eb", "\u0429": "\u01ea", "\u0449": "\u01eb"
							,"U": "\u0172", "u": "\u0173", "\u0413": "\u0172", "\u0433": "\u0173"
							," ": "\u02Db"
							},
				"menuFake": false},

{				"modifiers":   {"ctrlKey": true, "shiftKey": true, "altKey": false},
				"defaultmods": {"ctrlKey": true, "shiftKey": true, "altKey": false},
				"id": 13,
				"keyCode": 109, // Macron "_" how to do ae ?
				"mapping": {
					 "A": "\u0100", "a": "\u0101", "\u0424": "\u0100", "\u0444": "\u0101"
					,"E": "\u0112", "e": "\u0113", "\u0423": "\u0112", "\u0443": "\u0113"
					,"G": "\u1e20", "g": "\u1e21"
					,"I": "\u012a", "i": "\u012b", "\u0428": "\u012a", "\u0448": "\u012b"
					,"O": "\u014c", "o": "\u014d", "\u0429": "\u014c", "\u0449": "\u014d"
					,"U": "\u016a", "u": "\u016b", "\u0413": "\u016a", "\u0433": "\u016b"
					,"Y": "\u0232", "y": "\u0233"
					," ": "\u00af"
					},
				"menuFake": false},

{				"modifiers":   {"ctrlKey": true, "shiftKey": false, "altKey": false},
				"defaultmods": {"ctrlKey": true, "shiftKey": false, "altKey": false},
				"id": 14,
				"keyCode": 190, // Overdot "."
				"mapping": {
							 "A": "\u0226", "a": "\u0227", "\u0424": "\u0226", "\u0444": "\u0227"
							,"C": "\u010a", "c": "\u010b"
							,"E": "\u0116", "e": "\u0117", "\u0423": "\u0116", "\u0443": "\u0117"
							,"I": "\u0130"               , "\u0428": "\u0130"
							,"M": "\u1e40", "m": "\u1e41", "\u0411": "\u022e" // cyrillic small be
							,"N": "\u1e44", "n": "\u1e45"
							,"O": "\u022e", "o": "\u022f", "\u0429": "\u1e40", "\u0449": "\u1e41" // cyrillic sha
							,"P": "\u1e56", "p": "\u1e57"
							,"R": "\u1e58", "r": "\u1e59"
							,"S": "\u1e60", "s": "\u1e61"
							,"W": "\u1e86", "w": "\u1e87"
							,"X": "\u1e8a", "x": "\u1e8b"
							,"Y": "\u1e8e", "y": "\u1e8f"
							,"Z": "\u017b", "z": "\u017c"
							,"0": "\u2070", "1": "\u00b9", "2": "\u00b2", "3": "\u00b3", "4": "\u2074", "5": "\u2075", "6": "\u2076", "7": "\u2077", "8": "\u2078", "9": "\u2079"
							},
				"menuFake": false},

{				"modifiers":   {"ctrlKey": true, "shiftKey": false, "altKey": false},
				"defaultmods": {"ctrlKey": true, "shiftKey": false, "altKey": false},
				"id": 15,
				"keyCode": 59, // Underdot ";"
				"mapping": {
							 "A": "\u1ea0", "a": "\u1ea1", "\u0424": "\u1ea0", "\u0444": "\u1ea1"
							,"D": "\u1e0c", "d": "\u1e0d"
							,"E": "\u1eb8", "e": "\u1eb9", "\u0423": "\u1eb8", "\u0443": "\u1eb9"
							,"H": "\u1e24", "h": "\u1e25"
							,"I": "\u1eca", "i": "\u1ecb"
							,"K": "\u1e32", "k": "\u1e33"
							,"L": "\u1e36", "l": "\u1e37"
							,"O": "\u1ecc", "o": "\u1ecd", "\u0429": "\u1ecc", "\u0449": "\u1ecd"
							,"S": "\u1e62", "s": "\u1e63"
							,"T": "\u1e6c", "t": "\u1e6d"
							,"U": "\u1ee4", "u": "\u1ee5", "\u0413": "\u1ee4", "\u0433": "\u1ee5"
							,"V": "\u1e7e", "v": "\u1e7f"
							,"W": "\u1e88", "w": "\u1e89"
							,"Y": "\u1ef4", "y": "\u1ef5"
							," ": "\u0323"
							,"0": "\u2080", "1": "\u2081", "2": "\u2082", "3": "\u2083", "4": "\u2084", "5": "\u2085", "6": "\u2086", "7": "\u2087", "8": "\u2088", "9": "\u2089"
							},
				"menuFake": false},

{				"modifiers":   {"ctrlKey": true, "shiftKey": true, "altKey": false},
				"defaultmods": {"ctrlKey": true, "shiftKey": true, "altKey": false},
				"id": 16,
				"keyCode": 50, // Double Accute """, smart double quotes
				"mapping": {
							 "O": "\u0150","o": "\u0151", "\u0429": "\u014c", "\u0449": "\u014d"
							,"U": "\u0170","u": "\u0171", "\u0413": "\u0172", "\u0433": "\u016b"
							," ": "\u02dd"
							,"9": "\u201C", "0": "\u201D"  //Smart double quotes
							},
		"menuFake": false},

		{		"modifiers":   {"ctrlKey": true, "shiftKey": true, "altKey": false},
				"defaultmods": {"ctrlKey": true, "shiftKey": true, "altKey": false},
				"id": 17,
				"keyCode": 67, // c "c" circled letters!
				"mapping": {
					 "A": "\u24b6","a": "\u24d0"
					,"B": "\u24b7","b": "\u24d1"
					,"C": "\u24b8","c": "\u24d2"
					,"D": "\u24b9","d": "\u24d3"
					,"E": "\u24ba","e": "\u24d4"
					,"F": "\u24bb","f": "\u24d5"
					,"G": "\u24bc","g": "\u24d6"
					,"H": "\u24bd","h": "\u24d7"
					,"I": "\u24be","i": "\u24d8"
					,"J": "\u24bf","j": "\u24d9"
					,"K": "\u24c0","k": "\u24da"
					,"L": "\u24c1","l": "\u24db"
					,"M": "\u24c2","m": "\u24dc"
					,"N": "\u24c3","n": "\u24dd"
					,"O": "\u24c4","o": "\u24de"
					,"P": "\u24c5","p": "\u24df"
					,"Q": "\u24c6","q": "\u24e0"
					,"R": "\u24c7","r": "\u24e1"
					,"S": "\u24c8","s": "\u24e2"
					,"T": "\u24c9","t": "\u24e3"
					,"U": "\u24ca","u": "\u24e4"
					,"V": "\u24cb","v": "\u24e5"
					,"W": "\u24cc","w": "\u24e6"
					,"X": "\u24cd","x": "\u24e7"
					,"Y": "\u24ce","y": "\u24e8"
					,"Z": "\u24cf","z": "\u24e9"
					},
				"menuFake": false},

				{	"modifiers":   {"ctrlKey": true, "shiftKey": false, "altKey": true},
					"defaultmods": {"ctrlKey": true, "shiftKey": false, "altKey": true},
					"id": 18,
					"keyCode": 71, // g greek letters!
					"mapping": {
						 "A": "\u0391","a": "\u03b1"  // alpha
						,"B": "\u0392","b": "\u03b2"  // beta
						,"C": "\u03a8","c": "\u03c8"  // psi
						,"D": "\u0394","d": "\u03b4"  // delta
						,"E": "\u0395","e": "\u03b5"  // epsilon
						,"F": "\u03a6","f": "\u03c6"  // phi
						,"G": "\u0393","g": "\u03b3"  // gamma
						,"H": "\u0397","h": "\u03b7"  // eta
						,"I": "\u0399","i": "\u03b9"  // iota
						,"J": "\u039e","j": "\u03be"  // xi
						,"K": "\u039a","k": "\u03ba"  // kappa
						,"L": "\u039b","l": "\u03bb"  // lambda
						,"M": "\u039c","m": "\u03bc"  // mu
						,"N": "\u039d","n": "\u03bd"  // nu
						,"O": "\u039f","o": "\u03bf"  // omicron
						,"P": "\u03a0","p": "\u03c0"  // pi
						,"R": "\u03a1","r": "\u03c1"  // rho
						,"S": "\u03a2","s": "\u03c3"  // sigma
						,"T": "\u03a4","t": "\u03c4"  // tau
						,"U": "\u0398","u": "\u03b8"  // theta
						,"V": "\u03a4","v": "\u03c9"  // omega
						,"W": "\u03c2","w": "\u03c2"  // final sigma/sin
						,"X": "\u03a7","x": "\u03c7"  // chi
						,"Y": "\u03a5","y": "\u03c5"  // upsilon
						,"Z": "\u0386","z": "\u03b6"  // zeta
						},
					"menuFake": false}

				]

		]]>
</field>
	  <field name="aliveKeys">
		<![CDATA[
				[
					{ "id": 1,
					  "modifiers":	 {"ctrlKey": true, "shiftKey":	true, "altKey":  "true"},
					  "defaultmods": {"ctrlKey": true, "shiftKey":	true, "altKey":  "true"},
					  "charCode": 0,
					  "keyCode": 191,
					  "target": "\u00bf"},

					{ "id": 2,
					  "modifiers":	 {"ctrlKey": true, "shiftKey":	true, "altKey":  "true"},
					  "defaultmods": {"ctrlKey": true, "shiftKey":	true, "altKey":  "true"},
					  "charCode": 33,
					  "keyCode": 49,
					  "target": "\u00a1"},

					{ "id": 3,
					  "modifiers":	 {"ctrlKey": true, "shiftKey": false, "altKey":  "true"},
					  "defaultmods": {"ctrlKey": true, "shiftKey": false, "altKey":  "true"},
					  "charCode": 36,
					  "keyCode": 52,
					  "target": "\u20ac"}
				]
		]]>
</field>
	  <field name="layouts">
		<![CDATA[
				[{ "locale" : "us_int",
				  "map_deadKeys" : [
						 {"id" : 1, "keyCode": 192, "key": "`"}
						,{"id" : 2, "keyCode": 222, "key": "'"}
						,{"id" : 3, "keyCode":	54, "key": "^"}
						,{"id" : 4, "keyCode": 192, "key": "~"}
						,{"id" : 5, "keyCode":	59, "key": ":"}
						,{"id" : 6, "keyCode":	50, "key": "@", "charCode":  0}
						,{"id" : 7, "keyCode":	55, "key": "&"}
						,{"id" : 8, "keyCode": 191, "key": "/"}
						,{"id" : 9, "keyCode": 190, "key": ">"}
						,{"id" :10, "keyCode": 188, "key": "comma"}
						,{"id" :11, "keyCode":	57, "key": "("}
						,{"id" :12, "keyCode":	56, "key": "*"}
						,{"id" :13, "keyCode": 109, "key": "_"}
						,{"id" :14, "keyCode": 190, "key": "."}
						,{"id" :15, "keyCode":	59, "key": ";"}
						,{"id" :16, "keyCode":	50, "key": "\""}
						,{"id" :17, "keyCode":	79, "key": "o"}
						,{"id" :18, "keyCode":  71, "key": "g"} /* greek */
				 ],
				 "map_liveKeys" : [
						  {"id": 1, "charCode":   0, "keyCode": 191, "key": "?"}
						 ,{"id": 2, "charCode":  33, "keyCode":  49, "key": "!"}
						 ,{"id": 3, "charCode": 101, "keyCode":  52, "key": "@"}
				  ]
				}
,
				{ "locale" : "us_dvorak",
				  "map_deadKeys" : [
						 {"id" : 1, "keyCode": 192, "key": "`"}
						,{"id" : 2, "keyCode": 222, "key": "'"}
						,{"id" : 3, "keyCode":	54, "key": "^"}
						,{"id" : 4, "keyCode": 192, "key": "~"}
						,{"id" : 5, "keyCode":	59, "key": ":"}
						,{"id" : 6, "keyCode":	50, "key": "@", "charCode":  0}
						,{"id" : 7, "keyCode":	55, "key": "&"}
						,{"id" : 8, "keyCode": 191, "key": "/"}
						,{"id" : 9, "keyCode": 190, "key": "."}
						,{"id" :10, "keyCode": 188, "key": "comma"}
						,{"id" :11, "keyCode":	57, "key": "("}
						,{"id" :12, "keyCode":	56, "key": "*"}
						,{"id" :13, "keyCode": 109, "key": "_"}
						,{"id" :14, "keyCode": 190, "key": "."}
						,{"id" :15, "keyCode":	59, "key": ";"}
						,{"id" :16, "keyCode":  50, "key": "\""}
						,{"id" :17, "keyCode":	79, "key": "o"}
						,{"id" :18, "keyCode":  71, "key": "g"} /* greek */
				  ],
				  "map_liveKeys" : [
						  {"id": 1, "charCode":   0, "keyCode": 191, "key": "?"}
						 ,{"id": 2, "charCode":  33, "keyCode":  49, "key": "!"}
						 ,{"id": 3, "charCode": 101, "keyCode":  52, "key": "@"}
				  ]
				}
,
				{ "locale" : "irl",
				  "map_deadKeys" : [
						 {"id" : 1, "keyCode": 192, "key": "`"} /* grave */
						,{"id" : 2, "keyCode": 222, "key": "'"} /* acute */
						,{"id" : 3, "keyCode":  54, "key": "^"} /* circumflex */
						,{"id" : 4, "keyCode": 163, "key": "~", "shiftKey":false, "altKey": true} /* tilde */
						,{"id" : 5, "keyCode":  59, "key": ":"} /* umlaut */
						,{"id" : 6, "keyCode": 222, "key": "@", "shiftKey":true} /* ring */
						,{"id" : 7, "keyCode":  55, "key": "&"} /* sharp s */
						,{"id" : 8, "keyCode": 191, "key": "/"} /* stroke */
						,{"id" : 9, "keyCode": 190, "key": "."} /* caron */
						,{"id" :10, "keyCode": 188, "key": "comma"}  /* cedilla */
						,{"id" :11, "keyCode":  57, "key": "("} /* breve */
						,{"id" :12, "keyCode":  56, "key": "*"} /* ogonec */
						,{"id" :13, "keyCode": 173, "key": "_"} /* macron */
						,{"id" :14, "keyCode": 190, "key": "."} /* overdot */
						,{"id" :15, "keyCode":  59, "key": ";"} /* underdot */
						,{"id" :16, "keyCode":  50, "key": "\""} /* double accute */
						,{"id" :17, "keyCode":  79, "key": "o"} /* circle */
						,{"id" :18, "keyCode":  71, "key": "g"} /* greek */
				  ],
				  "map_liveKeys" : [
						  {"id": 1, "charCode":   0, "keyCode": 191, "key": "?"}
						 ,{"id": 2, "charCode":  33, "keyCode":  49, "key": "!"}
						 ,{"id": 3, "charCode": 101, "keyCode":  36, "key": "$"}
				  ]
				}
,
				{ "locale" : "uk",
				  "map_deadKeys" : [
				 {"id" : 1, "keyCode": 192, "key": "`"} /* grave */
				,{"id" : 2, "keyCode": 222, "key": "'"} /* acute */
				,{"id" : 3, "keyCode":  54, "key": "^"} /* circumflex */
				,{"id" : 4, "keyCode": 163, "key": "~", "shiftKey":false, "altKey": true} /* tilde */
				,{"id" : 5, "keyCode":  59, "key": ":"} /* umlaut */
				,{"id" : 6, "keyCode": 222, "key": "@", "shiftKey":true} /* ring */
				,{"id" : 7, "keyCode":  55, "key": "&"} /* sharp s */
				,{"id" : 8, "keyCode": 191, "key": "/"} /* stroke */
				,{"id" : 9, "keyCode": 190, "key": "."} /* caron */
				,{"id" :10, "keyCode": 188, "key": "comma"}  /* cedilla */
				,{"id" :11, "keyCode":  57, "key": "("} /* breve */
				,{"id" :12, "keyCode":  56, "key": "*"} /* ogonec */
				,{"id" :13, "keyCode": 173, "key": "_"} /* macron */
				,{"id" :14, "keyCode": 190, "key": "."} /* overdot */
				,{"id" :15, "keyCode":  59, "key": ";"} /* underdot */
				,{"id" :16, "keyCode":  50, "key": "\""} /* double accute */
				,{"id" :17, "keyCode":  79, "key": "o"} /* o - circle (ctrlshift c is taken by lightning)*/
				,{"id" :18, "keyCode":  71, "key": "g"} /* greek */
				  ],
				  "map_liveKeys" : [
								  {"id": 1, "charCode":   0, "keyCode": 191, "key": "?"}
								 ,{"id": 2, "charCode":  33, "keyCode":  49, "key": "!"}
								 ,{"id": 3, "charCode": 101, "keyCode":  36, "key": "$"}
				  ]
		}
,

		{ "locale" : "fr",
  "map_deadKeys" : [
				 {"id" : 1, "keyCode":  55, "key": "7",  "ctrlKey":true, "shiftKey": false}                 /* grave */
				,{"id" : 2, "keyCode":  52, "key": "4",  "ctrlKey":true, "shiftKey":true}                   /* acute */
				,{"id" : 3, "keyCode": 221, "key": "^",  "ctrlKey":false, "shiftKey":false, "altKey":false} /* circumflex */
				,{"id" : 4, "keyCode":  50, "key": "~",  "altKey":true}                                     /* tilde */
				,{"id" : 5, "keyCode": 221, "key": "..", "ctrlKey":false, "shiftKey":true}                  /* umlaut */
				,{"id" : 6, "keyCode":  48, "key": "0",  "ctrlKey":true, "shiftKey":true}                   /* ring */
				,{"id" : 7, "keyCode":  49, "key": "&",  "ctrlKey":true, "shiftKey":true}                   /* sharp s */
				,{"id" : 8, "keyCode": 191, "key": "/",  "ctrlKey":true}                                    /* stroke */
				,{"id" : 9, "keyCode": 226, "key": "<",  "ctrlKey":true, "shiftKey":false}                  /* caron */
				,{"id" :10, "keyCode": 188, "key": ",",  "ctrlKey":true, "shiftKey":false}                  /* cedilla */
				,{"id" :11, "keyCode":  53, "key": "(",  "ctrlKey":true, "shiftKey":true}                   /* breve */
				,{"id" :12, "keyCode": 220, "key": "*",  "ctrlKey":true, "shiftKey":false}                  /* ogonec */
				,{"id" :13, "keyCode":  56, "key": "_",  "ctrlKey":true, "shiftKey":true}                   /* macron */
				,{"id" :14, "keyCode": 190, "key": ".",  "ctrlKey":true, "shiftKey":true}                   /* overdot */
				,{"id" :15, "keyCode": 190, "key": ";",  "ctrlKey":true, "shiftKey":false}                  /* underdot */
				,{"id" :16, "keyCode":  51, "key": "\"", "ctrlKey":true, "shiftKey":false}                  /* double acute */
				,{"id" :17, "keyCode":  79, "key": "o"}                                                     /* circle */
				,{"id" :18, "keyCode":  71, "key": "g"} /* greek */
		  ],
		  "map_liveKeys" : [
				  {"id": 1, "charCode":   0, "keyCode": 188, "key": "?"}
				 ,{"id": 2, "charCode":   0, "keyCode": 223, "key": "!"}
				 ,{"id": 3, "charCode": 101, "keyCode":  59, "key": "$"}
		  ]
		}
,
		{ "locale" : "it",
		  "map_deadKeys" : [
			 {"id" : 1, "keyCode":  59, "key": "&#232;", "shiftKey": false} /* grave */
			,{"id" : 2, "keyCode":  59, "key": "&#233;", "shiftKey": true } /* acute */
			,{"id" : 3, "keyCode": 221, "key": "^",      "shiftKey": true } /* circumflex */
			,{"id" : 4, "keyCode": 220, "key": "|",      "shiftKey": true } /* tilde */
			,{"id" : 5, "keyCode": 190, "key": ":",      "shiftKey": true } /* umlaut */
			,{"id" : 6, "keyCode": 222, "key": "&#778;", "shiftKey": true } /* ring */
			,{"id" : 7, "keyCode":  54, "key": "&",      "shiftKey": true } /* sharp s */
			,{"id" : 8, "keyCode":  55, "key": "/",      "shiftKey": true } /* stroke */
			,{"id" : 9, "keyCode": 226, "key": ">",      "shiftKey": true } /* caron */
			,{"id" :10, "keyCode": 188, "key": "comma",  "shiftKey": false} /* cedilla */
			,{"id" :11, "keyCode":  56, "key": "(",      "shiftKey": true } /* breve */
			,{"id" :12, "keyCode": 107, "key": "*",      "shiftKey": true } /* ogonec */
			,{"id" :13, "keyCode": 109, "key": "_",      "shiftKey": true } /* macron */
			,{"id" :14, "keyCode": 190, "key": ".",      "shiftKey": false} /* overdot */
			,{"id" :15, "keyCode": 188, "key": ";",      "shiftKey": true}  /* underdot */
			,{"id" :16, "keyCode":  50, "key": "\"",     "shiftKey": true } /* double accute */
			,{"id" :17, "keyCode":  79, "key": "o",      "shiftKey": true } /* circle */
			,{"id" :18, "keyCode":  71, "key": "g"} /* greek */
		  ],
		  "map_liveKeys" : [
			  {"id": 1, "charCode":   0, "keyCode": 219, "key": "?"}
			 ,{"id": 2, "charCode":   0, "keyCode":  49, "key": "!"} /* already supported natively by italian keyboard */
			 ,{"id": 3, "charCode":   0, "keyCode":  52, "key": "$"}
		  ]
		}
,
		{ "locale" : "de",
		  "map_deadKeys" : [
			 {"id" : 1, "keyCode": 221, "key": "&#96;",  "shiftKey": true } /* grave */
			,{"id" : 2, "keyCode": 221, "key": "&#180;", "shiftKey": false} /* acute */
			,{"id" : 3, "keyCode": 220, "key": "^",      "shiftKey": false } /* circumflex */
			,{"id" : 4, "keyCode": 107, "key": "*",      "shiftKey": true } /* tilde */
			,{"id" : 5, "keyCode": 190, "key": ":",      "shiftKey": true } /* umlaut */
			,{"id" : 6, "keyCode": 220, "key": "&#778;", "shiftKey": true } /* ring above */
			,{"id" : 7, "keyCode":  54, "key": "&",      "shiftKey": true } /* sharp s */
			,{"id" : 8, "keyCode":  55, "key": "/",      "shiftKey": true } /* stroke */
			,{"id" : 9, "keyCode": 226, "key": ">",      "shiftKey": true } /* caron */
			,{"id" :10, "keyCode": 188, "key": "comma",  "shiftKey": false} /* cedilla */
			,{"id" :11, "keyCode":  56, "key": "(",      "shiftKey": true } /* breve */
			,{"id" :12, "keyCode": 191, "key": "'",      "shiftKey": true } /* ogonec */
			,{"id" :13, "keyCode": 109, "key": "_",      "shiftKey": true } /* macron */
			,{"id" :14, "keyCode": 190, "key": ".",      "shiftKey": false} /* overdot */
			,{"id" :15, "keyCode": 188, "key": ";",      "shiftKey": true } /* underdot */
			,{"id" :16, "keyCode":  50, "key": "\"",     "shiftKey": true } /* double accute */
			,{"id" :17, "keyCode":  79, "key": "o",      "shiftKey": true } /* circle */
			,{"id" :18, "keyCode":  71, "key": "g"} /* greek */
		  ],
		  "map_liveKeys" : [
			  {"id": 1, "charCode":   0, "keyCode": 219, "key": "?"}
			 ,{"id": 2, "charCode":   0, "keyCode":  49, "key": "!"}
			 ,{"id": 3, "charCode":   0, "keyCode":  52, "key": "$"}
		  ]
		}
,
		{ "locale" : "sv",
		  "map_deadKeys" : [
			 {"id" : 1, "keyCode": 219, "key": "&#96;", "shiftKey": true } /* grave */
			,{"id" : 2, "keyCode": 219, "key": "&#180;", "shiftKey": false} /* acute */
			,{"id" : 3, "keyCode":  59, "key": "^",      "shiftKey": true } /* circumflex */
			,{"id" : 4, "keyCode":  59, "key": "~",      "shiftKey": false} /* tilde */
			,{"id" : 5, "keyCode": 190, "key": ":",      "shiftKey": true } /* umlaut */
			,{"id" : 6, "keyCode":  52, "key": "&#164;", "shiftKey": true } /* ring */
			,{"id" : 7, "keyCode":  54, "key": "&",      "shiftKey": true } /* sharp s */
			,{"id" : 8, "keyCode":  55, "key": "/",      "shiftKey": true } /* stroke */
			,{"id" : 9, "keyCode": 226, "key": ">",      "shiftKey": true } /* caron */
			,{"id" :10, "keyCode": 188, "key": "comma",  "shiftKey": false} /* cedilla */
			,{"id" :11, "keyCode":  56, "key": "(",      "shiftKey": true } /* breve */
			,{"id" :12, "keyCode": 191, "key": "'",      "shiftKey": false} /* ogonec */
			,{"id" :13, "keyCode":  48, "key": "=",      "shiftKey": true } /* macron */
			,{"id" :14, "keyCode": 190, "key": ".",      "shiftKey": false} /* overdot */
			,{"id" :15, "keyCode": 188, "key": ";",      "shiftKey": true } /* underdot */
			,{"id" :16, "keyCode":  50, "key": "\"",     "shiftKey": true } /* double accute */
			,{"id" :17, "keyCode":  79, "key": "o",      "shiftKey": true } /* circle */
			,{"id" :18, "keyCode":  71, "key": "g"} /* greek */
		  ],
		  "map_liveKeys" : [
			  {"id": 1, "charCode":   0, "keyCode":  107, "key": "?"}
			 ,{"id": 2, "charCode":   0, "keyCode":   49, "key": "!"}
			 ,{"id": 3, "charCode":   0, "keyCode": 9999, "key": "%"} /* not used */
		  ]
		}
,
		{ "locale" : "ru",
		  "map_deadKeys" : [
			 {"id" : 1, "keyCode": 226, "key": "\\",     "shiftKey": false} /* grave */
			,{"id" : 2, "keyCode": 220, "key": "/",      "shiftKey": true } /* acute */
			,{"id" : 3, "keyCode":  54, "key": "^",      "shiftKey": true } /* circumflex */
			,{"id" : 4, "keyCode": 192, "key": "~",      "shiftKey": true } /* tilde */
			,{"id" : 5, "keyCode":  59, "key": ":",      "shiftKey": true } /* umlaut */
			,{"id" : 6, "keyCode":  51, "key": "3",      "shiftKey": true } /* ring */
			,{"id" : 7, "keyCode":  52, "key": "$",      "shiftKey": true } /* sharp s */
			,{"id" : 8, "keyCode":  53, "key": "%",      "shiftKey": true } /* stroke */
			,{"id" : 9, "keyCode": 190, "key": ">",      "shiftKey": true } /* caron */
			,{"id" :10, "keyCode": 188, "key": "comma",  "shiftKey": false} /* cedilla */
			,{"id" :11, "keyCode":  57, "key": "(",      "shiftKey": true } /* breve */
			,{"id" :12, "keyCode":  56, "key": "*",      "shiftKey": true } /* ogonec */
			,{"id" :13, "keyCode": 226, "key": "|",      "shiftKey": true } /* macron */
			,{"id" :14, "keyCode": 190, "key": ".",      "shiftKey": false} /* overdot */
			,{"id" :15, "keyCode":  59, "key": ";",      "shiftKey": false} /* underdot */
			,{"id" :16, "keyCode": 222, "key": "\"",     "shiftKey": true } /* double accute */
			,{"id" :17, "keyCode":  79, "key": "o",      "shiftKey": true } /* circle */
			,{"id" :18, "keyCode":  71, "key": "g"} /* greek */
		  ],
		  "map_liveKeys" : [
			  {"id": 1, "charCode":   0, "keyCode": 219, "key": "?"}
			 ,{"id": 2, "charCode":   0, "keyCode":  49, "key": "!"}
			 ,{"id": 3, "charCode":   0, "keyCode":  52, "key": "$"}
		  ]
		}


				 ]
		]]>
</field>
	  <field name="hexUnicodeKey">
		<![CDATA[
		({"modifiers": {"ctrlKey": false, "shiftKey": false,
									"altKey":  "true"},
									"keyCode": 88}) // "x"
		]]>
</field>
	<field name="decUnicodeModifiers">
		<![CDATA[
		({"ctrlKey": false, "shiftKey": false, "altKey": "true"})
		]]>
</field>
	<field name="decUnicode">
		<![CDATA[
		""
		]]>
</field>
	<field name="keyEventProps">
		<![CDATA[
		['keyCode', 'charCode', 'shiftKey', 'altKey', 'ctrlKey']

		]]>
</field>
	<method name="getCurrentLocale">
		<body>
		  <![CDATA[
			return Components.classes["@mozilla.org/preferences-service;1"]
				.getService(Components.interfaces.nsIPrefBranch)
				.getCharPref('extensions.zombiekeys.currentLayout');
		]]>
	</body>
	</method>
	<method name="log">
		<parameter name="message" />
		<body>
		  <![CDATA[
				var consoleService = Components.classes["@mozilla.org/consoleservice;1"]
					.getService(Components.interfaces.nsIConsoleService);
					consoleService.logStringMessage("[ZombieKeys XML]" + message + (message != "\n" ? " " : ""));
		]]>
		</body>
	</method>
	<method name="logKey">
		<parameter name="why" />
		<parameter name="event" />
		<body>
		  <![CDATA[
		    if (ZombieKeys.Util.isPrivateBrowsing()) return;
			var message=why;
			for (var k=0; k<this.keyEventProps.length; k++) {
					message += this.keyEventProps[k] + "=" + event[this.keyEventProps[k]]+" ";
			}
			ZombieKeys.Util.logToConsole(message+"\n", true);
		]]>
		</body>
	</method>

	<method name="isDebugOption">
		<parameter name="option" />
		<body>
		  <![CDATA[
		try {
				var prefService = Components.classes["@mozilla.org/preferences-service;1"]
								.getService(Components.interfaces.nsIPrefBranch);
				if (!prefService.getBoolPref("extensions.zombiekeys.debug"))
					return false;
				return prefService.getBoolPref("extensions.zombiekeys.debug." + option);}
			catch(e) {return false;}
		]]>
		</body>
	</method>

	<method name="isPrefOption">
		<parameter name="option" />
		<body>
		  <![CDATA[
		try {
				var prefService = Components.classes["@mozilla.org/preferences-service;1"]
								.getService(Components.interfaces.nsIPrefBranch);
				return prefService.getBoolPref("extensions.zombiekeys." + option);}
			catch(e) {return false;}
		]]>
		</body>
	</method>



	<method name="logMappingString">
		<parameter name="mapping" />
		<body>
		  <![CDATA[
						var message="";
						for (var mappee in mapping) {
										message += mappee+" ("+mappee.charCodeAt(0)+") => "+mapping[mappee]+" ("+mapping[mappee].charCodeAt(0)+") ";
								}
								return message+"\n";
		]]>
</body>
	</method>
	<method name="checkModifiers">
		<parameter name="event" />
		<parameter name="modifiers" />
		<body>
		  <![CDATA[
						for (var key in modifiers) {
								if (event[key] != modifiers[key]) {
								return false;
								}
						}
						return true;
				]]>
</body>
	</method>
	<method name="fakeKey">
		<parameter name="event" />
		<parameter name="chr" />
		<parameter name="createKeyUp" />
		<body>
		  <![CDATA[
			try {
				var isDebug = this.isDebugOption('fakeKey');
				if (isDebug) {this.logKey("fakeKey: ('" +chr + "' " + event.type + ")", event);}
				var target = event.target ? event.target : document.commandDispatcher.focusedElement;
				
				if (ZombieKeys.Preferences.isPreference('subComma')) {
					switch (chr) {
						case "\u015e": // S-cedilla
							chr = "\u0218";
							break;
						case "\u015f": // s-cedilla
							chr = "\u0219";
							break;
						case "\u0162": // T-cedilla
							chr = "\u021a";
							break;
						case "\u0163": // t-cedilla
							chr = "\u021b";
							break;
					}
				}

				var keypress_event = document.createEvent("KeyboardEvent");
				keypress_event.initKeyEvent("keypress", true, true, event.view,
									   false, false, false, false,
									   0, chr.charCodeAt(0));

				if (isDebug)
					this.logKey("faking '"+chr+"': ", keypress_event);
				target.dispatchEvent(keypress_event);
				event.preventDefault();
				event.stopPropagation();
			}
			catch(ex) {
				ZombieKeys.Util.logToConsole("exception during fakekey: " + ex.toString(), true);
			}
		]]>
</body>
	</method>
	<method name="getPreceedingString">
		<parameter name="elt" />
		<parameter name="numchars" />
		<body>
		  <![CDATA[
				var pos = elt.selectionStart;
				if (pos < numchars) {numchars=pos;}
				return elt.value.slice(pos-numchars,pos);
		]]>
</body>
	</method>
	<method name="replacePreceedingString">
		<parameter name="elt" />
		<parameter name="numchars" />
		<parameter name="newtext" />
		<body>
		  <![CDATA[
						var posStart = elt.selectionStart;
								var posEnd = elt.selectionEnd;
								var scrollTop = elt.scrollTop;
								var scrollLeft = elt.scrollLeft;

								if (posStart < numchars) {numchars=posStart;}

								elt.value = elt.value.slice(0,posStart-numchars)+
										newtext+
										elt.value.slice(posEnd);
						var newpos = posStart+newtext.length;
						elt.selectionStart = newpos;
						elt.selectionEnd = newpos;

						elt.scrollTop = scrollTop;
						elt.scrollLeft = scrollLeft;
						elt.focus();
				]]>
</body>
	</method>
	<method name="initLocale">
		<parameter name="locale" />
		<body>
		  <![CDATA[
			var that=this;
			ZombieKeys.Util.logDebug("Initialize key locale: " + locale + " ...");
			var theLayout; // determine locale
			Array.forEach(this.layouts, function(layout) {
				if (layout.locale==locale) {
								theLayout = layout;
				}
			});


			for (var k=0; k<this.deadKeys.length; k++) {
				Array.forEach(theLayout.map_deadKeys, function(Map) {
					if(Map.id == that.deadKeys[k].id) {
						that.deadKeys[k].keyCode = theLayout.map_deadKeys[k].keyCode;
						// Special mods
						if (typeof theLayout.map_deadKeys[k].charCode)
							that.deadKeys[k].charCode = theLayout.map_deadKeys[k].charCode;
						else
							if(that.layouts[0].map_deadKeys[k].charCode)
								that.deadKeys[k].charCode = that.layouts[0].map_deadKeys[k].charCode;

						if (typeof theLayout.map_deadKeys[k].shiftKey !== "undefined")
							that.deadKeys[k].modifiers.shiftKey = theLayout.map_deadKeys[k].shiftKey;
						else
							that.deadKeys[k].modifiers.shiftKey = that.deadKeys[k].defaultmods.shiftKey;

						if (typeof theLayout.map_deadKeys[k].altKey !== "undefined")
							that.deadKeys[k].modifiers.altKey = theLayout.map_deadKeys[k].altKey;
						else
							that.deadKeys[k].modifiers.altKey = that.deadKeys[k].defaultmods.altKey;
					}
				});
			}

			for (var k=0; k<this.aliveKeys.length; k++) {
				Array.forEach(theLayout.map_liveKeys, function(Map) {
					if(Map.id == that.aliveKeys[k].id) {
						that.aliveKeys[k].keyCode = Map.keyCode;
						that.aliveKeys[k].charCode = Map.charCode;

						if (typeof Map.ctrlKey !== "undefined" )
							that.aliveKeys[k].modifiers.ctrlKey = Map.ctrlKey;
						else
							that.aliveKeys[k].modifiers.ctrlKey = that.aliveKeys[k].defaultmods.ctrlKey;

						if (typeof Map.shiftKey !== "undefined" )
							that.aliveKeys[k].modifiers.shiftKey = Map.shiftKey;
						else
							that.aliveKeys[k].modifiers.shiftKey = that.aliveKeys[k].defaultmods.shiftKey;

						if (typeof Map.altKey !== "undefined" )
							that.aliveKeys[k].modifiers.altKey = Map.altKey;
						else
							that.aliveKeys[k].modifiers.altKey = that.aliveKeys[k].defaultmods.altKey;
					}
				});
			}
			that.activeLocale = locale;
		]]>
		</body>
	</method>
</implementation>
<handlers>
	  <handler event="keypress" keycode="VK_LEFT"
	  command="cmd_charPrevious" />
	  <handler event="keypress" keycode="VK_RIGHT"
	  command="cmd_charNext" />
	  <handler event="keypress" keycode="VK_LEFT" modifiers="shift"
	  command="cmd_selectCharPrevious" />
	  <handler event="keypress" keycode="VK_RIGHT"
	  modifiers="shift" command="cmd_selectCharNext" />
	  <!-- Cut/copy/paste/undo -->
	  <handler event="keypress" key="c" modifiers="accel"
	  command="cmd_copy" />
	  <handler event="keypress" key="x" modifiers="accel"
	  command="cmd_cut" />
	  <handler event="keypress" key="v" modifiers="accel"
	  command="cmd_paste" />
	  <handler event="keypress" key="z" command="cmd_redo"
	  modifiers="accel,shift" />
	  <handler event="keypress" key="z" modifiers="accel"
	  command="cmd_undo" />
	  <handler event="keypress" key="a" modifiers="accel"
	  command="cmd_selectAll" />
	  <handler event="keypress" keycode="VK_UP"
	  command="cmd_charPrevious" />
	  <handler event="keypress" keycode="VK_DOWN"
	  command="cmd_charNext" />
	  <handler event="keypress" keycode="VK_UP" modifiers="shift"
	  command="cmd_selectCharPrevious" />
	  <handler event="keypress" keycode="VK_DOWN" modifiers="shift"
	  command="cmd_selectCharNext" />
	  <handler event="keypress" keycode="VK_HOME"
	  command="cmd_beginLine" />
	  <handler event="keypress" keycode="VK_END"
	  command="cmd_endLine" />
	  <handler event="keypress" keycode="VK_HOME" modifiers="shift"
	  command="cmd_selectBeginLine" />
	  <handler event="keypress" keycode="VK_END" modifiers="shift"
	  command="cmd_selectEndLine" />
	  <handler event="keypress" keycode="VK_HOME"
	  modifiers="shift,control" command="cmd_selectTop" />
	  <handler event="keypress" keycode="VK_END"
	  modifiers="shift,control" command="cmd_selectBottom" />
	  <handler event="keypress" keycode="VK_HOME"
	  modifiers="control" command="cmd_moveTop" />
	  <handler event="keypress" keycode="VK_END"
	  modifiers="control" command="cmd_moveBottom" />
	  <handler event="keypress" keycode="VK_LEFT"
	  modifiers="control" command="cmd_wordPrevious" />
	  <handler event="keypress" keycode="VK_RIGHT"
	  modifiers="control" command="cmd_wordNext" />
	  <handler event="keypress" keycode="VK_LEFT"
	  modifiers="shift,control" command="cmd_selectWordPrevious" />
	  <handler event="keypress" keycode="VK_RIGHT"
	  modifiers="shift,control" command="cmd_selectWordNext" />
	  <handler event="keypress" key="y" modifiers="accel"
	  command="cmd_redo" />
	  <handler event="keypress" keycode="VK_DELETE"
	  modifiers="shift" command="cmd_cutOrDelete" />
	  <handler event="keypress" keycode="VK_DELETE"
	  modifiers="control" command="cmd_deleteWordForward" />
	  <handler event="keypress" keycode="VK_INSERT"
	  modifiers="control" command="cmd_copy" />
	  <handler event="keypress" keycode="VK_INSERT"
	  modifiers="shift" command="cmd_paste" />
	  <handler event="keypress" keycode="VK_BACK" modifiers="alt"
	  command="cmd_undo" />
	  <handler event="keypress" keycode="VK_BACK"
	  modifiers="alt,shift" command="cmd_redo" />
	  <handler event="keypress" keycode="VK_BACK"
	  modifiers="control" command="cmd_deleteWordBackward" />
	  <handler event="keypress">
		<![CDATA[
			var isDebug = this.isDebugOption('keyPressHandler');
			if (isDebug) {this.logKey("press: ", event);}
			if (this.activeLocale != this.getCurrentLocale()) {
				ZombieKeys.Util.logDebug("Change active Locale from " + this.activeLocale + " to " + this.getCurrentLocale());
				this.initLocale(this.getCurrentLocale());
				this.activeLocale = this.getCurrentLocale();
			}

			// check "alive" keys which fire during "keypress"
			for (var k=0; k<aliveKeys.length; k++) {
				if (  ( (event.keyCode && event.keyCode  == aliveKeys[k].keyCode)
					||
						(event.charCode && event.charCode == aliveKeys[k].charCode)    )
					&&
					checkModifiers(event, aliveKeys[k].modifiers)) {
					fakeKey(event, aliveKeys[k].target);
					return;
				}
			}

			// check if/which "dead" key is active
			for (var k=0; k<this.deadKeys.length; k++) {
				if (this.deadKeys[k].alive) {
					this.deadKeys[k].alive = false;
					// check if there's a mapping for this character
					// entered after "dead" key
					if (this.isPrefOption('showMapping') && !ZombieKeys.Util.isPrivateBrowsing()) {
						ZombieKeys.Util.logToConsole("Detected living zombie #"+k+" for "+event.charCode+
										   " you can now: \n "+this.logMappingString(this.deadKeys[k].mapping), true);
					}
					var code = String.fromCharCode(event.charCode);
					if (this.deadKeys[k].mapping[code]) {
						// AG make a pair of events press+down
							if (deadKeys[k].menuFake && event.type=='keypress') {
								// make it a pair of events
								deadKeys[k].menuFake = false;
								fakeKey(event, deadKeys[k].mapping[code], true); // copy event with keyup!
							}
							else
								this.fakeKey(event, deadKeys[k].mapping[code], false);
						return;
					}
				}
			}
  ]]>
</handler>
	  <handler event="keyup">
		<![CDATA[
			var isDebug = this.isDebugOption('keyUpHandler');

			if (isDebug) {this.logKey("up: ", event);}

			// check "alive" keys which only fire on "keyup"
			for (var k=0; k<this.aliveKeys.length; k++) {
				if (this.aliveKeys[k].keyCode &&
					(event.keyCode == this.aliveKeys[k].keyCode) &&
					checkModifiers(event, this.aliveKeys[k].modifiers))
				{
					this.fakeKey(event, this.aliveKeys[k].target);
					return;
				}
			}

			// check if "dead" key is activated
			for (var k=0; k<this.deadKeys.length; k++) {
				if (
					(
					 (event.keyCode == this.deadKeys[k].keyCode)
					 ||
					 (this.deadKeys[k].charCode && event.charCode == this.deadKeys[k].charCode)
					)
					&&
					this.checkModifiers(event, this.deadKeys[k].modifiers))
				{
					if (isDebug && !ZombieKeys.Util.isPrivateBrowsing()) {
						ZombieKeys.Util.logToConsole("created zombie # " + k
							   + this.logMappingString(this.deadKeys[k].mapping), true);
					}
					this.deadKeys[k].alive = true;
					event.preventDefault();
					event.stopPropagation();
					return;
				}
			}
			// process ALT+X (treat preceeding 4 chars as hex unicode string
			// and replace with corresponding char)
			if ((event.keyCode == this.hexUnicodeKey.keyCode) &&
					this.checkModifiers(event, this.hexUnicodeKey.modifiers)) {
				var hexUnicode = this.getPreceedingString(event.target, 4);
				var code = parseInt(hexUnicode, 16);
				this.replacePreceedingString(event.target, 4, String.fromCharCode(code));
				return;
			}

			// process ALT+<numeric keypad>
			if (this.checkModifiers(event, this.decUnicodeModifiers))
			{
				if ((event.keyCode >= 96) && (event.keyCode <= 105)) {
					this.decUnicode += (event.keyCode-96).toString(); // add digit
					event.preventDefault();
					event.stopPropagation();
					return;
				} else if (event.keyCode == 18) {
					// released ALT - let's insert
					if (this.decUnicode != "") {
						var code = parseInt(decUnicode, 10);
						this.fakeKey(event, String.fromCharCode(code));
						this.decUnicode = "";
					}
					event.preventDefault();
					event.stopPropagation();
					return;
				}
			}
  ]]>
</handler>
	</handlers>
  </binding>
</bindings>
